<?xml version="1.0" encoding="GBK"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"  
    xmlns:security="http://www.springframework.org/schema/security" 
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xsi:schemaLocation="  
        http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/security   
        http://www.springframework.org/schema/security/spring-security-3.2.xsd  
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/data/jpa   
        http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd  
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd  
        http://www.springframework.org/schema/mvc   
    	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!--自动注入dao层-->
   <import resource="spring-dao.xml"></import>


	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataBaseInfo"/>
	</bean>
	<!-- 配置事务的传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="txManager"><!-- 配置事务管理器 -->
		<tx:attributes>
			<!--rollback-for="Exception"不论是运行时异常还是非运行时异常 事务都要回滚-->
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="Batch*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="*" read-only="true"/>
			<!-- 如果不是以上三种，则配置成只读事务(如select)。只读事务可以提高性能，当更新某个对象时，将不会再做脏数据检查。(因为是只读的并不用更新，所以不用再作比较,判断是否读取到脏数据。) -->
		</tx:attributes>
	</tx:advice>

	<!-- .. 代表该包下任意嵌套层次的子包 -->
	<aop:config>
		<aop:advisor pointcut="execution(* com.fh.shop.admin.biz..*.*(..))" advice-ref="txAdvice"/>
	</aop:config>

	<!--自动扫描@service 并注入service -->
	<context:component-scan base-package="com.fh.shop.admin.biz"/>





	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 指定所上传文件的总大小,单位字节。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
		<!--max size:10M-->
		<property name="maxUploadSize" value="10240000" />
	</bean>
	<!--
        jsp视图解析器，对模型视图名称的解析，即在模型视图名称前后缀
        如/view/welcome.jsp对应的视图名就是：welcome
        这个类在视图解析器链中一定要定义在其他视图的后面，因为它始终会返回一个视图
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    
	 <!--开启注解驱动  --> 
 	<mvc:annotation-driven/> 

<!--创建JavaBean  ioc控制反转-->
<!--Aspect aspect = new com.fh.shop.backend.aspect.Aspect-->
	<bean id="aspect" class="com.fh.shop.admin.aspect.Aspect"/>
 <!--切面  -->
 	<aop:config>
 		<aop:aspect  ref="aspect">
 		<aop:pointcut expression="execution(* com.fh.shop.admin.controller..*.add*(..))
 								||execution(* com.fh.shop.admin.controller..*.update*(..))
 								||execution(* com.fh.shop.admin.controller..*.delete*(..))
 								||execution(* com.fh.shop.admin.controller..*.login(..))" id="logPointCut"/>
 		<aop:around method="doLog" pointcut-ref="logPointCut"/>
 		</aop:aspect>
 	</aop:config>  
 	
 	<!--springMVC拦截器  -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/><!--/**代表匹配所有的路径  拦截所有交给springmvc处理的请求  -->
			<bean id="loginInterceptor" class="com.fh.shop.backend.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>


	
</beans>